#include <iomanip>
#include <iostream>
#include <fstream> // For file input and output
#include <vector> // Input file is stored in a vector
#include <cassert> // For the assert statement used to validate file open
#include <string>
#include <math.h>
/*
#include <iomanip>
#include <cstdlib> // for malloc()
#include <ctime>      // For time functions
#include <math.h>     // For pow()
 #include <stdio.h>
*/
using namespace std;

class DivyData{
private:
    string bikeNumber;
    string typeOfBike;
    string timeStart;
    string timeEnd;
    string locStart;
    string locEnd;
    double LatitudeStart;
    double LongitutdeStart;
    double LatitudEnd;
    double LongitutdeEnd;
    string membership;
public:
    DivyData();
    void setUpStrings(string ID, string type, string tS, string tE, string LocS, string LocE, string member);
    void setUpDoubles(double LatS, double LongS, double LatE, double LongE);
    void printTrial();
    string getMembership();
    double getLatS();
    double getLongS();
    double getLatE();
    double getLongE();
};

string DivyData::getMembership() {return this->membership;}

double DivyData::getLatS() {return this->LatitudeStart;}

double DivyData::getLongS() {return this->LongitutdeStart;}

double DivyData::getLatE() {return this->LatitudEnd;}

double DivyData::getLongE() {return this->LongitutdeEnd;}

void DivyData::printTrial() {
    cout << this->bikeNumber << " " << this->timeStart;
}

DivyData::DivyData(){
    this->bikeNumber = "NoName";
    this->typeOfBike = "None";
    this->timeStart = "0/0/0 00:00";
    this->timeEnd = "1/1/1 11:11";
    this->locStart = "UIC";
    this->locEnd = "UIC";
    this->LatitudeStart = 00.00000;
    this->LongitutdeStart = 00.00000;
    this->LatitudEnd = 00.000000;
    this->LongitutdeEnd = 00.00000;
    this->membership = "None";
}

void DivyData::setUpStrings(string ID, string type, string tS, string tE, string LocS, string LocE, string member) {
    this->bikeNumber = ID;
    this->typeOfBike = type;
    this->timeStart = tS;
    this->timeEnd = tE;
    this->locStart = LocS;
    this->locEnd = LocE;
    this->membership = member;
}

void DivyData::setUpDoubles(double LatS, double LongS, double LatE, double LongE) {
    this->LatitudeStart = LatS;
    this->LongitutdeStart = LongS;
    this->LatitudEnd = LatE;
    this->LongitutdeEnd = LongE;
}

long double toRadians(const long double degree)
{
    long double one_deg = (3.14159265358979323846) / 180;
    return (one_deg * degree);
}

long double distance(long double LatS, long double LongS,
                     long double LatE, long double LongE)
{

    LatS = toRadians(LatS);
    LongS = toRadians(LongS);
    LatE = toRadians(LatE);
    LongE = toRadians(LongE);

    // Haversine Formula
    long double dlong = LongE - LongS;
    long double dlat = LatE - LatS;

    long double ans = pow(sin(dlat / 2), 2) +
                      cos(LatS) * cos(LatE) *
                      pow(sin(dlong / 2), 2);

    ans = 2 * asin(sqrt(ans));


    long double R = 3956;

    // Calculate the result
    ans = ans * R;

    return ans;
}

int fixLine(string Line, DivyData &bike, int &number, int &numberclean){
    int end;
    string ID, type, tS, tE, LocS, LocE, member, conversion;
    double LatS, LongS, LatE, LongE;

    for(int i=0; i<Line.size(); i++){
        if(Line.at(i)==',' && Line.at(i+1)==','){
            number++;
            return 1;
        }else if(Line.at(0)=='r'){
            return 1;
        }
    }
    number++;
    numberclean++;
    for(int j=0; j<11; j++){
        end = Line.find(',');

        switch(j){
            case 0: ID = Line.substr(0, end); Line.erase(0, end+1); break;
            case 1: type = Line.substr(0, end); Line.erase(0, end+1); break;
            case 2: tS = Line.substr(0, end); Line.erase(0, end+1); break;
            case 3: tE = Line.substr(0, end); Line.erase(0, end+1); break;
            case 4: LocS = Line.substr(0, end); Line.erase(0, end+1); break;
            case 5: LocE = Line.substr(0, end); Line.erase(0, end+1); break;
            case 6: conversion = Line.substr(0, end); Line.erase(0, end+1); LatS = stod(conversion); break;
            case 7: conversion = Line.substr(0, end); Line.erase(0, end+1); LongS = stod(conversion); break;
            case 8: conversion = Line.substr(0, end); Line.erase(0, end+1); LatE = stod(conversion); break;
            case 9: conversion = Line.substr(0, end); Line.erase(0, end+1); LongE = stod(conversion); break;
            case 10: member = Line.substr(0, end); Line.erase(0, end+1); break;
        }
    }bike.setUpStrings(ID, type, tS, tE, LocS, LocE, member);
    bike.setUpDoubles(LatS, LongS, LatE, LongE);
    return 0;
}

int readAndClean(vector<DivyData> &divyBikesSample, vector<DivyData> &divyBikesAll, vector<DivyData> &SeptemberBikes,
                 int &sD, int &aD, int &SD){
    DivyData bike;
    int badLine;
    int option = 0;
    string line;
    int number = 0;
    int numberclean = 0;

    cout << "Select datafile:\n   1. Small subset of data with 14 rides to help create your program\n"
            "   2. Week day vs weekend rides\n   3. All September 2021 data (not tested in Zybooks)\n"
            "Your selection-->";
    cin >> option;

    ifstream inStream;  // Declare an input stream for reading
    if(option==1){
        inStream.open("divvyridesampledata.csv");  // Open dictionary words file
    }else if(option==2){
        inStream.open("weekdayweekend.csv");  // Open dictionary words file
    }else if(option==3){
        inStream.open("all_divvy_rides_september.csv");  // Open dictionary words file
    }
    assert( inStream.fail() == false);   // Ensure file open worked
    if(option==1 && divyBikesSample.size()==0){
        while ( getline(inStream, line)){   //While there is another word to be read
            badLine = fixLine(line, bike, number, numberclean);
            if(badLine==0){
                divyBikesSample.push_back(bike);
            }
        }
    }else if(option==2 && divyBikesAll.size()==0){
        while ( getline(inStream, line)){   //While there is another word to be read
            badLine = fixLine(line, bike, number, numberclean);
            if(badLine==0){
                divyBikesAll.push_back(bike);
            }
        }
    }else if(option==3 && SeptemberBikes.size()==0){
        while ( getline(inStream, line)){   //While there is another word to be read
            badLine = fixLine(line, bike, number, numberclean);
            if(badLine==0){
                SeptemberBikes.push_back(bike);
            }
        }
    }
    inStream.close(); // Close the dictionary words file

    cout << "Total # of trips found in datafile: " << number << endl;
    cout << "Total # of trips in clean data: " << numberclean << endl;
    return 1;
}

void displayTripData(int vectorNumber, vector<DivyData> divyBikesSample, vector<DivyData> divyBikesAll, vector<DivyData> SeptemberBikes){

    DivyData curr;
    double miles = 0;
    double average = 0;


    switch (vectorNumber) {
        case 1:
            for(int i=0; i<divyBikesSample.size(); i++){

                curr = divyBikesSample.at(i);

                miles = miles + distance(curr.getLatS(),curr.getLongS(),curr.getLatE(),curr.getLongE());

            }
            average = round(miles) / divyBikesSample.size();
            cout << "Total # of miles traveled: " << round(miles) << endl;
            cout << "Average length of trips in miles: " << average<< endl;
            break;

        case 2:
            for(int i=0; i<divyBikesAll.size(); i++){

                curr = divyBikesAll.at(i);

                miles = miles + distance(curr.getLatS(),curr.getLongS(),curr.getLatE(),curr.getLongE());

            }
            //average = round(miles) / divyBikesAll.size();
            cout << "Total # of miles traveled: " << round(miles) << endl;
            //cout << "Average length of trips in miles: " << average << endl;
            break;
        case 3:
            for(int i=0; i<SeptemberBikes.size(); i++){
                miles = 0;
                curr = SeptemberBikes.at(i);

                miles = miles + distance(curr.getLatS(),curr.getLongS(),curr.getLatE(),curr.getLongE());

            }
            average = round(miles) / SeptemberBikes.size();
            cout << "Total # of miles traveled: " << miles << endl;
            cout << "Average length of trips in miles: " << average << endl;
            break;


        default:
            return;
    }


    cout << "Longest trip information below:\n-------------------------------" << endl;


}

void displayMembers(int vectorNumber, vector<DivyData> divyBikesSample, vector<DivyData> divyBikesAll, vector<DivyData> SeptemberBikes){
    DivyData curr;
    double total, casuals;
    total = casuals = 0;

    switch (vectorNumber) {
        case 1:
            for(int i=0; i<divyBikesSample.size(); i++){
                curr = divyBikesSample.at(i);
                total++;
                if(curr.getMembership()=="casual"){casuals++;}
            }//cout << casuals << " " << total << " " << total-casuals << endl;
            cout << "   Casual Rider Percentage: " << setprecision(3) << (casuals/total)*100 << "%";
            cout << "\n   Member Rider Percentage: " << setprecision(3) << ((total-casuals)/total)*100 << "%" << endl;
            break;
        case 2:
            for(int i=0; i<divyBikesAll.size(); i++){
                curr = divyBikesAll.at(i);
                total++;
                if(curr.getMembership()=="casual"){casuals++;}
            }//cout << casuals << " " << total << " " << setprecision(3) << total-casuals << endl;
            cout << "   Casual Rider Percentage: " << setprecision(3) << (casuals/total)*100 << "%";
            cout << "\n   Member Rider Percentage: " << setprecision(3) << ((total-casuals)/total)*100 << "%" << endl;
            break;
        case 3:
            for(int i=0; i<SeptemberBikes.size(); i++){
                curr = SeptemberBikes.at(i);
                total++;
                if(curr.getMembership()=="casual"){casuals++;}
            }//cout << casuals << " " << total << " " << setprecision(3) << total-casuals << endl;
            cout << "   Casual Rider Percentage: " << setprecision(3) << (casuals/total)*100 << "%";
            cout << "\n   Member Rider Percentage: " << setprecision(3) << ((total-casuals)/total)*100 << "%" << endl;
            break;
        default: return;
    }
}

void displayWeekUsage(int vectorNumber, vector<DivyData> divyBikesSample, vector<DivyData> divyBikesAll, vector<DivyData> SeptemberBikes){
    int option;
    cout << "Select type of display: \n"
            "      1. Counts of rides per hour in the day\n"
            "      2. Proportional 50 column graph with @ for weekday and + for weekend\n"
            "   Your selection-->";
    cin >> option;

}

void findClosestStation(){

}

int main()
{
    vector<DivyData> divyBikesSample;
    vector<DivyData> divyBikesAll;
    vector<DivyData> SeptemberBikes;

    int i, option, number, vectorNumber, sampleDone, allDone, septDone;
    i = number = option = vectorNumber = sampleDone = allDone = septDone = 0;


    cout << "Analyze Divvy bike ride information using September "
            "trip data.\nFirst select option 1 to read and clean the data.\n\n";
    while(option!=6){
        cout << "Select a menu option:\n   1. Select datafile, display"
                "rides totals and clean data\n   2. Display overall trip information\n   3. Display percentage"
                " of members vs. casual riders\n   4. Display weekday vs weekend usage\n   5. Extra Credit:"
                " find closest station\n   6. Exit\nYour choice -->";
        cin >> option;

        if(option!=1 && number==0){
            cout << "First read in data by selecting menu option 1\n" << endl;
            continue;
        }

        switch(option){
            case 1: number++;
                vectorNumber = readAndClean(divyBikesSample, divyBikesAll, SeptemberBikes, sampleDone, allDone, septDone);
                break;
            case 2: displayTripData(vectorNumber, divyBikesSample, divyBikesAll, SeptemberBikes);
                break;
            case 3: displayMembers(vectorNumber, divyBikesSample, divyBikesAll, SeptemberBikes);
                break;
            case 4: displayWeekUsage(vectorNumber, divyBikesSample, divyBikesAll, SeptemberBikes);
                break;
            case 5: findClosestStation();
                break;
            default: return 0;
        }
    }
}
