#include <iostream>
#include <fstream> // For file input and output
#include <vector> // Input file is stored in a vector
#include <cassert> // For the assert statement used to validate file open
#include <string>
/*
#include <iomanip>
#include <cstdlib> // for malloc()
#include <ctime>      // For time functions
#include <math.h>     // For pow()
 #include <stdio.h>
*/
using namespace std;

class DivyData{
private:
    string bikeNumber;
    string typeOfBike;
    string timeStart;
    string timeEnd;
    string locStart;
    string locEnd;
    double LatitudeStart;
    double LongitutdeStart;
    double LatitudEnd;
    double LongitutdeEnd;
    string membership;
public:
    DivyData();
    void setUpStrings(string ID, string type, string tS, string tE, string LocS, string LocE, string member);
    void setUpDoubles(double LatS, double LongS, double LatE, double LongE);
    void printTrial();

};

void DivyData::printTrial() {
    cout << this->bikeNumber << " " << this->membership << endl;
}

DivyData::DivyData(){
    this->bikeNumber = "NoName";
    this->typeOfBike = "None";
    this->timeStart = "0/0/0 00:00";
    this->timeEnd = "1/1/1 11:11";
    this->locStart = "UIC";
    this->locEnd = "UIC";
    this->LatitudeStart = 00.00000;
    this->LongitutdeStart = 00.00000;
    this->LatitudEnd = 00.000000;
    this->LongitutdeEnd = 00.00000;
    this->membership = "None";
}

void DivyData::setUpStrings(string ID, string type, string tS, string tE, string LocS, string LocE, string member) {
    this->bikeNumber = ID;
    this->typeOfBike = type;
    this->timeStart = tS;
    this->timeEnd = tE;
    this->locStart = LocS;
    this->locEnd = LocE;
    this->membership = member;
}

void DivyData::setUpDoubles(double LatS, double LongS, double LatE, double LongE) {
    this->LatitudeStart = LatS;
    this->LongitutdeStart = LongS;
    this->LatitudEnd = LatE;
    this->LongitutdeEnd = LongE;
}



void fixLine(string Line, DivyData &bike, vector<DivyData> &divyBikesSample, vector<DivyData> &divyBikesAll, vector<DivyData> &SeptemberBikes){
    DivyData currentBike;
    int end;
    string ID, type, tS, tE, LocS, LocE, member, conversion;
    double LatS, LongS, LatE, LongE;

    for(int i=0; i<Line.size(); i++){
        if(Line.at(i)==',' && Line.at(i+1)==','){
            return;
        }else if(Line.at(0)=='r'){
            return;
        }
    }
    for(int j=0; j<11; j++){
        end = Line.find(',');

        switch(j){
            case 0: ID = Line.substr(0, end); Line.erase(0, end+1); break;
            case 1: type = Line.substr(0, end); Line.erase(0, end+1); break;
            case 2: tS = Line.substr(0, end); Line.erase(0, end+1); break;
            case 3: tE = Line.substr(0, end); Line.erase(0, end+1); break;
            case 4: LocS = Line.substr(0, end); Line.erase(0, end+1); break;
            case 5: LocE = Line.substr(0, end); Line.erase(0, end+1); break;
            case 6: conversion = Line.substr(0, end); Line.erase(0, end+1); LatS = stod(conversion); break;
            case 7: conversion = Line.substr(0, end); Line.erase(0, end+1); LongS = stod(conversion); break;
            case 8: conversion = Line.substr(0, end); Line.erase(0, end+1); LatE = stod(conversion); break;
            case 9: conversion = Line.substr(0, end); Line.erase(0, end+1); LongE = stod(conversion); break;
            case 10: member = Line.substr(0, end); Line.erase(0, end+1); break;
        }end = Line.find((end+1), ',');
    }currentBike.setUpStrings(ID, type, tS, tE, LocS, LocE, member);
    currentBike.setUpDoubles(LatS, LongS, LatE, LongE);


}




void readAndClean(vector<DivyData> &divyBikesSample, vector<DivyData> &divyBikesAll, vector<DivyData> &SeptemberBikes){
    int option = 0, number = 0, numberclean = 0;
    cout << "Select datafile:\n   1. Small subset of data with 14 rides to help create your program\n"
            "   2. Week day vs weekend rides\n   3. All September 2021 data (not tested in Zybooks)\n"
            "Your selection--> ";
    cin >> option;

    ifstream inStream;  // Declare an input stream for reading
    if(option==1){
        inStream.open("divvyridesampledata.csv");  // Open dictionary words file
    }else if(option==2){
        inStream.open("weekdayweekend.csv");  // Open dictionary words file
    }else if(option==3){
        inStream.open("all_divvy_rides_september.csv");  // Open dictionary words file
    }
    assert( inStream.fail() == false);   // Ensure file open worked

    string line;

    while ( getline(inStream, line)){   //While there is another word to be read
        //fixLine(line, numberclean);
        if(option==1){
            while ( std::getline(inStream, line) ){
              ++number;}

            inStream.open("divvyridesampledata.csv");


            cout << divyBikesSample.size();
            for(int k =0 ; k < divyBikesSample.size(); k++)
            {
                cout << 1;
            }
            cout << "Total # of trips found in datafile: " << number << endl;
           cout << "Total # of trips in clean data: " << numberclean << endl;

        }

        else if(option==2){
            while ( std::getline(inStream, line) ){
                ++number;}

              cout << "Total # of trips found in datafile: " << number << endl;
              cout << "Total # of trips in clean data: " << numberclean << endl;

        }else if(option==3){
            while ( std::getline(inStream, line) ){
                ++number;}
            cout << "Total # of trips found in datafile: " << number << endl;
            cout << "Total # of trips in clean data: " << numberclean << endl;
        }
    }

    inStream.close(); // Close the dictionary words file

}

void displayTripData(vector<DivyData> &divyBikesSample, double miles){

    double start, end;


    DivyData bike1;

    bike1.setUpDoubles(100,200,300,400);
/*
    for(int i = 0; i < divyBikesSample.size(); i++) {
        start = bike1.PrintLatS()*bike1.PrintLatS() + bike1.PrintLongS()*bike1.PrintLongS();
        end = = bike1.PrintLatE()*bike1.PrintLatE() + bike1.PrintLongE()*bike1.PrintLongE();
        cout<<miles = end - start;


    }*/

    // start = bike1.PrintLatS()*bike1.PrintLatS() + bike1.PrintLongS()*bike1.PrintLongS();
    //start = LatS*LatS + LongS*LongS;
    //end = LatE*LatE + LongE*LongE;
    //miles = end - start;
    // cout<<miles;


   // cout << "Number: " << bike1.getDoubles();
    cout << "Total # of miles traveled:" << miles << endl;
    cout << "Average length of trips in miles: " << miles/13 << endl << endl;

    for(int i = 0; i < divyBikesSample.size(); i++)
    {
        // cout << 1;
    }

    cout << "Longest trip information below: " << endl << "-------------------------------" << endl;
    cout << "Trip ID: " << endl;
    cout << "Trip start location: " << endl;
    cout << "Trip end location: " << endl;
    cout << "Trip distance in miles: " << endl << endl << endl;

}

void displayMembers(vector<DivyData> &divyBikesSample, string word){

    ifstream inStream;
    inStream.open("divvyridesampledata.csv");
    while ( getline(inStream, word)) {


    }

}

void displayWeekUsage(){

    cout << "Select type of display: \n" << "   1. Counts of rides per hour in the day\n"
    "   2. Proportional 50 column graph with @ for weekday and + for weekend" << endl;



}

void findClosestStation(){

}

int main()
{
    vector<DivyData> divyBikesSample;
    vector<DivyData> divyBikesAll;
    vector<DivyData> SeptemberBikes;
    string word;
    int i, option, number, miles;
    DivyData trial;
    i = number = option = 0;
    cout << "Analyze Divvy bike ride information using September "
            "trip data.\nFirst select option 1 to read and clean the data.\n\n";
    while(option!=6){
        cout << "Select a menu option:\n   1. Select datafile, display"
                "rides totals and clean data\n   2. Display overall trip information\n   3. Display percentage"
                " of members vs. casual riders\n   4. Display weekday vs weekend usage\n   5. Extra Credit:"
                " find closest station\n   6. Exit\nYour choice --> ";
        cin >> option;

        if(option!=1 && number==0){
            cout << "First read in data by selecting menu option 1\n" << endl;
            continue;
        }

        switch(option){
            case 1: readAndClean(divyBikesSample, divyBikesAll, SeptemberBikes);
                number = 1;
                break;
            case 2: displayTripData(divyBikesSample, miles);
                break;
            case 3: displayMembers(divyBikesSample,word);
                break;
            case 4: displayWeekUsage();
                break;
            case 5: findClosestStation();
                break;
        }
    }
}
